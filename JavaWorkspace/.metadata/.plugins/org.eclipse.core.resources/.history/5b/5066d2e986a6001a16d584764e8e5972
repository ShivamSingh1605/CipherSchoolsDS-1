package queues;
class CircularQueue{
	final int size = 10;
	int arr[]=new int[size];
	int front = -1,rear=-1;
	void enqueue(int data)
	{
		if(this.isEmpty())
		{
			front++;
			rear++;
			arr[rear] = data;
		}
		else if((rear+1)%size == front)//if queue is full
		{
			System.out.println("Queue is Full, No space to add");
		}
		else{
			rear=(rear+1)%size;
			arr[rear]=data;
		}
	}
	int dequeue()
	{
		if(this.isEmpty())
		{
			System.out.println("Queue is Empty, Nothing to Dequeue");
			return -1;
		}
		if(front==rear)
		{
			int x = arr[front];
			front=-1;
			rear=-1;
			return x;
		}
		front=(front+1)%size;
		return arr[front];
	}
	int peek()
	{
		if(this.isEmpty()) 
		{
			System.out.println("Queue is Empty, No Peek element");
			return -1;
		}
		return arr[front];
	}
	boolean isEmpty()
	{
		return(front == -1 && rear == -1);
	}
}

public class CircularImp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CircularQueue cq = new CircularQueue();
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		cq.enqueue(1);
		System.out.println(cq.peek());
	}

}
